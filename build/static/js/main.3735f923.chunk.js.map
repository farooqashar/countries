{"version":3,"sources":["pages/Home.js","pages/Query.js","App.js","reportWebVitals.js","index.js"],"names":["query","gql","Home","useQuery","data","loading","error","class","to","message","countries","map","each_country","key","Card","variant","CardContent","name","emoji","capital","phone","code","currency","Query","useState","countryCode","setCountryCode","useLazyQuery","handleSubmit","className","htmlFor","id","rows","cols","required","onChange","event","target","value","type","placeholder","onClick","variables","toUpperCase","country","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3735f923.chunk.js","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst query = gql`\n  {\n    countries {\n      name\n      capital\n      emoji\n      code\n      currency\n      phone\n    }\n  }\n`;\n\nfunction Home() {\n  const { data, loading, error } = useQuery(query);\n\n  return (\n    <div>\n      <h1>Countries</h1>\n      <p class=\"text-info\">\n        This site allows users to query a specific country for more information\n        in addition to viewing mass information all at once.\n      </p>\n      <br />\n      <br />\n      <Link to=\"/query\">\n        <button class=\"btn btn-primary\">Query A Country</button>\n      </Link>\n      <br />\n      <br />\n\n      <div>\n        {loading && <h3 class=\"text-warning\">Loading...</h3>}\n        {error && <h3 class=\"text-danger\">Error: {error.message} </h3>}\n        {data &&\n          data.countries.map((each_country, key) => {\n            return (\n              <div key={key}>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <h2 class=\"text-danger\">\n                      {each_country.name} {each_country.emoji}\n                    </h2>\n\n                    <h6>Capital: {each_country.capital}</h6>\n\n                    <h6>Phone Extension: {each_country.phone} </h6>\n\n                    <h6>Country Code: {each_country.code}</h6>\n\n                    <h6>Currency: {each_country.currency}</h6>\n                  </CardContent>\n                </Card>\n                <br />\n                <br />\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nconst query = gql`\n  query Country($code: ID!) {\n    country(code: $code) {\n      name\n      capital\n      emoji\n      code\n      currency\n      phone\n    }\n  }\n`;\n\nfunction Query() {\n  const [countryCode, setCountryCode] = useState(\"\");\n  const [handleSubmit, { data, loading, error }] = useLazyQuery(query);\n\n  return (\n    <div>\n      {error && <h3 class=\"text-danger\">Error: {error.message} </h3>}\n\n      <div>\n        <h1>Query A Country</h1>\n        <p class=\"text-info\">\n          Query A Country By Entering A Relevant Country Code Below!\n        </p>\n\n        <div>\n          <Link to=\"/\">\n            <button class=\"btn btn-primary\">Go Back</button>\n          </Link>\n        </div>\n        <br />\n\n        <div class=\"form-group\">\n          <label className=\"form-label\" htmlFor=\"code\">\n            Country Code:\n          </label>\n\n          <input\n            id=\"code\"\n            rows=\"1\"\n            cols=\"47\"\n            required\n            class=\"form-control\"\n            onChange={(event) => setCountryCode(event.target.value)}\n            type=\"text\"\n            placeholder=\"Enter A Country Code Here\"\n          ></input>\n        </div>\n\n        <div class=\"form-group\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-danger\"\n            onClick={() => {\n              handleSubmit({ variables: { code: countryCode.toUpperCase() } });\n            }}\n          >\n            Query Country\n          </button>\n        </div>\n      </div>\n\n      <div>\n        {data && (\n          <>\n            <h2 class=\"eachl\">\n              {data.country.name} {data.country.emoji}\n            </h2>\n            <h4 class=\"ssm\">Capital: {data.country.capital}</h4>\n            <h4 class=\"ssm\">Currency: {data.country.currency}</h4>\n            <h4 class=\"ssm\">Country Code: {data.country.code}</h4>\n            <h4 class=\"ssm\">Phone Extension: {data.country.phone}</h4>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Query;\n","import \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Home from \"./pages/Home.js\";\nimport Query from \"./pages/Query.js\";\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"https://countries.trevorblades.com/\",\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/query\" exact component={Query} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}